<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xmlns="http://java.sun.com/xml/ns/javaee"
		 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
		 version="3.0">
	<display-name>THS Web Project</display-name>

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>

	<!-- Spring和mybatis的配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:conf/spring.xml</param-value>
	</context-param>

	<!-- 编码过滤器 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<!-- <async-supported>true</async-supported> -->
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>*.vm</url-pattern>
		<url-pattern>/ws/*</url-pattern>
	</filter-mapping>

	<!--为了允许跨域访问-->
	<filter>
		<filter-name>CorsFilter</filter-name>
		<filter-class>ths.project.datacenter.filter.CORSFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>CorsFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- ========================单点登录开始 ======================== -->
	<filter>
		<filter-name>WanWeiSSOFilter</filter-name>
		<filter-class>ths.project.wanwei.sso.WanWeiSSOFilter</filter-class>
		<init-param>
			<!-- 统一认证服务端的IP+PORT -->
			<param-name>SSOServerUrl</param-name>
			<param-value>http://10.168.6.71:9008</param-value>
		</init-param>
		<init-param>
			<!-- 统一认证服务端的IP+PORT -proxy -->
			<param-name>SSOServerUrlProxy</param-name>
			<param-value>http://10.215.224.19:31001</param-value>
		</init-param>
		<init-param>
			<param-name>SSOClientUrl</param-name>
			<param-value>http://10.215.224.1:9006/tag</param-value>
		</init-param>
		<init-param>
			<!-- 客户端ID，万维方提供 -->
			<param-name>clientId</param-name>
			<param-value>0</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>WanWeiSSOFilter</filter-name>
		<url-pattern>*.vm</url-pattern>
	</filter-mapping>
	<!-- ========================单点登录结束 ======================== --> 

	<!--权限过滤器配置-区分管理员和普通用户-->
	<filter>
		<filter-name>AuthorityFilter</filter-name>
		<filter-class>ths.util.TagAuthorityFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>AuthorityFilter</filter-name>
		<url-pattern>*.vm</url-pattern>
	</filter-mapping>

	<!-- XSS&SQL过滤 -->
	<filter>
		<filter-name>xssFilter</filter-name>
		<filter-class>ths.jdp.project.filter.XSSFilter</filter-class>
		<init-param>
			<param-name>regExpress</param-name>
			<param-value><![CDATA[(script)|([<>'"])|%27|%22]]></param-value>
			<!--
				关键字正则： (?<![0-9a-zA-Z\_]+)script(?![0-9a-zA-Z\_]+)，为什么正则写成这种形式？因为script虽然是关键字，但scriptA、_script、Bscript为非关键字，前后只要存在[0-9a-zA-Z\_]就不应该成为危险字符，因为数据库字段名称经常包含关键字，例：UPDATE_TIME。
				<param-value><![CDATA[([<>'"])|%27|%22|(?<![0-9a-zA-Z\_]+)script(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)select(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)insert(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)delete(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)from(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)drop(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)update(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)truncate(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)xp_cmdshell(?![0-9a-zA-Z\_]+)|exec\s+master|(?<![0-9a-zA-Z\_]+)netlocalgroup(?![0-9a-zA-Z\_]+)|net\s+user]]></param-value>
			 -->
		</init-param>
		<init-param>
			<param-name>regExcludeUrl</param-name>
			<!-- 不过滤的路径，值为正则 -->
			<param-value><![CDATA[/tag/save.vm$|/topic/save.vm$|customSave.vm$|/ws$|/entity/|/tag-common/]]></param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>xssFilter</filter-name>
		<url-pattern>*.vm</url-pattern>
	</filter-mapping>


	<!-- Spring监听器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Spring request监听器，帮助我们很方便的在程序中拿到request -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	<listener>
		<listener-class>ths.jdp.custom.util.res.CustomServer</listener-class>
	</listener>


	<!-- 防止Spring内存溢出监听器，确保Web应用程序的类加载器以及其加载的类正确的释放资源 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>


	<!-- Spring MVC servlet -->
	<servlet>
		<servlet-name>SpringMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:conf/spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup> <!-- 容器启动，直接加载 -->
		<async-supported>true</async-supported>  <!-- 支持异步处理 -->
	</servlet>
	<servlet-mapping>
		<servlet-name>SpringMVC</servlet-name>
		<url-pattern>*.vm</url-pattern>
		<url-pattern>/websocket/*</url-pattern><!-- websocket的后缀 -->
		<url-pattern>/ws/*</url-pattern><!--接口-->
	</servlet-mapping>
	<error-page>
		<error-code>500</error-code>
		<location>/WEB-INF/jsp/_common/error_500.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/jsp/_common/404.html</location>
	</error-page>
</web-app>
